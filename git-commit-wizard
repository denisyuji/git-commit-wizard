#!/usr/bin/env bash
# git-commit-wizard: Generate a commit message using OpenAI based on staged diff and original file content.
# The commit message will adhere to Linux project commit message guidelines.

set -euo pipefail

VERSION="0.1.4"

OPENAI_MODEL="gpt-4o-mini"

usage() {
  echo "Usage: git-commit-wizard [options]"
  echo
  echo "Generate a commit message using OpenAI based on staged changes."
  echo "Make sure to stage your changes with 'git add' before running this tool."
  echo
  echo "Options:"
  echo "  -h, --help      Show this help message and exit."
  echo "  -v, --version   Show the script version and exit."
  echo "  -m <message>    Provide additional context for the commit message."
  echo "  -r, --revert    Revert the last commit, keep changes staged."
}

additional_message=""
revert=false

while [[ $# -gt 0 ]]; do
  case $1 in
    -h|--help)
      usage
      exit 0
      ;;
    -v|--version)
      echo "git-commit-wizard version $VERSION"
      exit 0
      ;;
    -m)
      if [[ -n "${2:-}" ]]; then
        additional_message="$2"
        shift 2
      else
        echo "Error: -m flag requires a message argument."
        exit 1
      fi
      ;;
    -r|--revert)
      revert=true
      shift
      ;;
    *)
      echo "Unknown option: $1"
      usage
      exit 1
      ;;
  esac
done

# Ensure necessary commands are available.
command -v git >/dev/null || { echo "git is required but not installed."; exit 1; }

if $revert; then
  if git rev-parse --verify HEAD >/dev/null 2>&1; then
    echo "Reverting last commit but keeping changes staged..."
    git reset --soft HEAD^
    echo "Revert complete. Changes are staged but not committed."
    exit 0
  else
    echo "Error: No previous commit to revert."
    exit 1
  fi
fi

command -v curl >/dev/null || { echo "curl is required but not installed."; exit 1; }
command -v jq >/dev/null || { echo "jq is required but not installed."; exit 1; }

# Check for OpenAI API key.
if [ -z "${OPENAI_API_KEY:-}" ]; then
  echo "Error: OPENAI_API_KEY is not set. Please export your API key before running this script."
  exit 1
fi

# Verify that there are staged changes.
if git diff --cached --quiet; then
  echo "No staged changes detected. Please stage your changes before running git-commit-wizard."
  exit 1
fi

# Retrieve the repository's origin URL (if available).
origin_url=$(git config --get remote.origin.url || echo "Not available")

# Collect the diff of staged changes.
diff_content=$(git diff --cached)

# Collect original file contents (from HEAD) for each staged file.
originals=""
if git rev-parse --verify HEAD >/dev/null 2>&1; then
  for file in $(git diff --cached --name-only); do
    if [[ "$file" == *".min.js" ]] || [[ "$file" == *"dist"* ]]; then
      continue
    fi
    if git diff --cached -- "$file" | grep -q "Binary files"; then
      continue
    fi
    if git cat-file -e HEAD:"$file" 2>/dev/null; then
      orig=$(git show HEAD:"$file")
      originals+="\n===== $file =====\n$orig\n"
    else
      originals+="\n===== $file =====\nNew file, no original content.\n"
    fi
  done
else
  originals="No previous commit available. All files are new."
fi

# Determine the current branch for additional context.
current_branch=$(git rev-parse --abbrev-ref HEAD 2>/dev/null || echo "(initial commit)")

# Prepare the prompt for the OpenAI API with extra context.
prompt="Project: git-commit-wizard
Origin URL: $origin_url

I have staged the following changes on branch '$current_branch' in my git repository.
The changes include modifications, additions, or removals in one or more files.
Please generate a commit message that adheres to the Linux project commit guidelines with the following requirements:
  - The commit title must be in the format 'subject: description'.
  - The entire title (subject line) must be no more than 50 characters.
  - Use the imperative mood in the title.
  - Leave a blank line after the title.
  - Format the commit description body with lines no more than 50 characters.
  - Use clear and concise language that summarizes what was changed and why.

Below is the diff of the staged changes:
$diff_content

Additionally, here are the original contents of the files before the changes for context:
$originals

Additional user-provided context: $additional_message

Please provide a plain text commit message following these guidelines."

# Write the entire prompt to a temporary file
prompt_file=$(mktemp)
echo "$prompt" > "$prompt_file"

# Use --rawfile to load the entire prompt from that file
jq_output=$(jq -n --rawfile prompt "$prompt_file" '{
  model: "'$OPENAI_MODEL'",
  messages: [
    {role: "system", content: "You are a helpful commit message generator."},
    {role: "user", content: $prompt}
  ]
}')

# Clean up the temporary file
rm "$prompt_file"

# Now call the API with the resulting JSON
response=$(echo "$jq_output" | curl -sS https://api.openai.com/v1/chat/completions \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $OPENAI_API_KEY" \
  -d @-)

# Extract the generated commit message from the response.
commit_message=$(echo "$response" | jq -r '.choices[0].message.content')

# If no commit message is returned, try to display the error message from OpenAI.
if [ -z "$commit_message" ] || [ "$commit_message" == "null" ]; then
  openai_error=$(echo "$response" | jq -r '.error.message // empty')
  if [ -n "$openai_error" ]; then
    echo "OpenAI API error: $openai_error"
  else
    echo "Failed to generate a commit message from the OpenAI API. Please check your API key and network connection."
  fi
  exit 1
fi

# Write the commit message to a temporary file.
temp_msg_file=$(mktemp /tmp/commit_message.XXXXXX)
echo "$commit_message" > "$temp_msg_file"

# Show the generated commit message.
echo "----------------------------------------"
echo "Generated commit message:"
echo "----------------------------------------"
cat "$temp_msg_file"
echo "----------------------------------------"
echo "Opening commit message in your editor for review and modification."
echo "Save and close the editor when ready to commit."

# Determine which editor to use.
if [ -n "${EDITOR:-}" ]; then
    editor="$EDITOR"
else
    # Detect if running on Windows (using $OSTYPE or $OS)
    if [[ "$OSTYPE" == "msys" || "$OSTYPE" == "cygwin" || "${OS:-}" == "Windows_NT" ]]; then
        editor="notepad"
    else
        if command -v nano >/dev/null 2>&1; then
            editor="nano"
        elif command -v vim >/dev/null 2>&1; then
            editor="vim"
        else
            editor="vi"
        fi
    fi
fi

# Open the commit message in the chosen editor.
$editor "$temp_msg_file"

# Commit using the reviewed message and include --signoff.
git commit --signoff -F "$temp_msg_file"

# Clean up the temporary file.
rm "$temp_msg_file"